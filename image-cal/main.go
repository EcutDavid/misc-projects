package main

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"image"
	"image/color"
	"image/draw"
	"image/png"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"

	qrcode "github.com/skip2/go-qrcode"
)

func encode(url string, newStyle bool) string {
	var png []byte
	var err error
	if newStyle {
		err = qrcode.WriteColorFile(url, qrcode.Medium, 256, color.White, color.RGBA{0, 199, 206, 255}, "qr.png")
		if err != nil {
			log.Fatal(err)
		}
		png, err = ioutil.ReadFile("qr.png")
	} else {
		png, err = qrcode.Encode(url, qrcode.Medium, 256)
	}

	if err != nil {
		log.Fatal(err)
	}

	sEnc := base64.StdEncoding.EncodeToString([]byte(png))
	return fmt.Sprintf("data:image/png;base64,%s", string(sEnc))
}

var numImage []image.Image
var recSize image.Point

var imgaeRaw = []string{
	"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",
}

func init() {
	numImage = make([]image.Image, 10)
	for i := 0; i < 10; i++ {
		reader := base64.NewDecoder(base64.StdEncoding, strings.NewReader(imgaeRaw[i]))

		image, _, err := image.Decode(reader)
		if err != nil {
			log.Fatal(err)
		}
		numImage[i] = image
	}
	recSize = numImage[0].Bounds().Size()
}

func drawImg(num int) {
	if num >= 9999 || num < 0 {
		num = 42
	}
	str := strconv.Itoa(num)
	nums := []int{}
	for i := 0; i < len(str); i++ {
		dig, _ := strconv.Atoi(str[i : i+1])
		nums = append(nums, dig)
	}

	m := image.NewRGBA(image.Rect(0, 0, 360, 200))
	white := color.RGBA{255, 255, 255, 255}
	draw.Draw(m, m.Bounds(), &image.Uniform{white}, image.ZP, draw.Src)

	for i := 0; i < len(nums); i++ {
		draw.Draw(m,
			image.Rectangle{image.Point{20 + recSize.X*i, 20}, image.Point{20 + recSize.X*(i+1), 20 + recSize.Y}},
			numImage[nums[i]],
			image.ZP,
			draw.Over,
		)
	}

	buffer := bytes.NewBuffer([]byte{})
	png.Encode(buffer, m)
	sEnc := base64.StdEncoding.EncodeToString(buffer.Bytes())
	fmt.Printf("data:image/png;base64,%s", sEnc)
}

func parseNum(str string) int {
	str = strings.Trim(str, " ")
	if len(str) == 0 {
		return 42
	}
	parts := strings.Split(str, "*")
	for i := 0; i < len(parts); i++ {
		parts[i] = strings.Trim(parts[i], " ")
	}

	result, err := strconv.Atoi(parts[0])
	if err != nil {
		return 42
	}
	for i := 1; i < len(parts); i++ {
		num, err := strconv.Atoi(parts[i])
		if err != nil {
			return 42
		}
		result *= num
	}
	return result
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("Need tell me what to calc")
	}
	num := parseNum(os.Args[1])
	drawImg(num)
}
